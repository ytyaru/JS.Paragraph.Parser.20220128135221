[1mdiff --git a/src/0.8/paragraph-parser.js b/src/0.8/paragraph-parser.js[m
[1mindex 286c1b7..eb9b39f 100644[m
[1m--- a/src/0.8/paragraph-parser.js[m
[1m+++ b/src/0.8/paragraph-parser.js[m
[36m@@ -1,6 +1,6 @@[m
 class ParagraphOutput extends ParseOutput {[m
     constructor(func) { super(func); }[m
[31m-    parse(text, regexp) {[m
[32m+[m[32m    parse(text) {[m
         // textの先頭と末尾にある連続した空白文字を削除する[m
         text = text.replace(/^[\r\n|\r|\n]{1,}/, '');[m
         text = text.replace(/[\r\n|\r|\n]{1,}$/, '');[m
[36m@@ -38,7 +38,7 @@[m [mclass ParagraphMultilineOutput extends ParseOutput {[m
         return lines.slice(begin, Math.max(end, 1));[m
     }[m
     parseParagraph(content, brLen) { return ElementString.get('p', content) + '<br>'.repeat(brLen); }[m
[31m-    parse(text, regexp) {[m
[32m+[m[32m    parse(text) {[m
         let lines = text.split(/\r\n|\r|\n/g);[m
         console.debug(lines)[m
 [m
[36m@@ -147,20 +147,14 @@[m [mclass ParagraphMultilinePaddingBlockEndClassOutput extends ParagraphMultilineBlo[m
     constructor(func) { super(func, 'padding'); }[m
 }[m
 [m
[31m-class ParagraphInput extends ParseInput {[m
[31m-    constructor() {[m
[31m-        super();[m
[31m-        super.RegExps.push(new RegExp(/[\s\S]*/mu));[m
[31m-    }[m
[31m-}[m
 class ParagraphParseSetFactory {[m
[31m-    static #Book = new ParseSet(new ParagraphInput(), new ParagraphOutput());[m
[31m-    static #PoemMargin = new ParseSet(new ParagraphInput(), new ParagraphMultilineMarginBlockEndStyleOutput());[m
[31m-    static #PoemBorder = new ParseSet(new ParagraphInput(), new ParagraphMultilineBorderBlockEndStyleOutput());[m
[31m-    static #PoemPadding = new ParseSet(new ParagraphInput(), new ParagraphMultilinePaddingBlockEndStyleOutput());[m
[31m-    static #PoemMarginClass = new ParseSet(new ParagraphInput(), new ParagraphMultilineMarginBlockEndClassOutput());[m
[31m-    static #PoemBorderClass = new ParseSet(new ParagraphInput(), new ParagraphMultilineBorderBlockEndClassOutput());[m
[31m-    static #PoemPaddingClass = new ParseSet(new ParagraphInput(), new ParagraphMultilinePaddingBlockEndClassOutput());[m
[32m+[m[32m    static #Book = new ParseSet(new ParagraphOutput());[m
[32m+[m[32m    static #PoemMargin = new ParseSet(new ParagraphMultilineMarginBlockEndStyleOutput());[m
[32m+[m[32m    static #PoemBorder = new ParseSet(new ParagraphMultilineBorderBlockEndStyleOutput());[m
[32m+[m[32m    static #PoemPadding = new ParseSet(new ParagraphMultilinePaddingBlockEndStyleOutput());[m
[32m+[m[32m    static #PoemMarginClass = new ParseSet(new ParagraphMultilineMarginBlockEndClassOutput());[m
[32m+[m[32m    static #PoemBorderClass = new ParseSet(new ParagraphMultilineBorderBlockEndClassOutput());[m
[32m+[m[32m    static #PoemPaddingClass = new ParseSet(new ParagraphMultilinePaddingBlockEndClassOutput());[m
 [m
     static get Book() { return ParagraphParseSetFactory.#Book; } [m
     static get PoemMargin () { return ParagraphParseSetFactory.#PoemMargin ; } [m
[1mdiff --git a/src/0.8/parser.js b/src/0.8/parser.js[m
[1mindex 304b42f..9e77d5f 100644[m
[1m--- a/src/0.8/parser.js[m
[1m+++ b/src/0.8/parser.js[m
[36m@@ -11,26 +11,37 @@[m [mclass Parser {[m
     }[m
 }[m
 class ParseSet {[m
[32m+[m[32m    constructor(output) { // 出力メソッド[m
[32m+[m[32m        this._output = output; // ParseOutput型[m
[32m+[m[32m    }[m
[32m+[m[32m    parse(text) { return this._output.parse(text); }[m
[32m+[m[32m}[m
[32m+[m[32mclass RegExpParseSet extends ParseSet {[m
     constructor(input, output) { // RegExpセット, 出力メソッド[m
[32m+[m[32m        super(output);[m
         this._input = input;   // ParseInput型[m
[31m-        this._output = output; // ParseOutput型[m
[32m+[m[32m//        this._output = output; // ParseOutput型[m
     }[m
     parse(text) {[m
         let parsed = text;[m
         console.log(this._input.RegExps)[m
         for (const regexp of this._input.RegExps) {[m
[31m-            parsed = this._output.parse(parsed, regexp)[m
[32m+[m[32m//            parsed = this._output.parse(parsed, regexp)[m
[32m+[m[32m            parsed = super._output.parse(parsed, regexp)[m
         }[m
         return parsed;[m
     }[m
 }[m
 class ParseOutput {[m
     constructor(func) { this._func = func; }[m
[31m-    parse(text, regexp) { return text.replace(regexp, (match, p1)=>{return this._func(match, p1);}) }[m
[32m+[m[32m    parse(text) { return this._func(text); }[m
 }[m
[31m-class ParseInput {[m
[31m-    constructor() {[m
[31m-        this._regexps = [];[m
[31m-    }[m
[32m+[m[32mclass RegExpParseOutput extends ParseOutput {[m
[32m+[m[32m    constructor(func) { super(func); }[m
[32m+[m[32m    parse(text, regexp) { return text.replace(regexp, (match, p1)=>{return super._func(match, p1);}) }[m
[32m+[m[32m}[m
[32m+[m[32mclass ParseInput {}[m
[32m+[m[32mclass RegExpParseInput extends ParseInput {[m
[32m+[m[32m    constructor() { super(); this._regexps = []; }[m
     get RegExps() { return this._regexps; }[m
 }[m
[1mdiff --git a/src/0.8/ruby-parser.js b/src/0.8/ruby-parser.js[m
[1mindex de23c51..6ac2295 100644[m
[1m--- a/src/0.8/ruby-parser.js[m
[1m+++ b/src/0.8/ruby-parser.js[m
[36m@@ -1,4 +1,4 @@[m
[31m-class RubyOutput extends ParseOutput {[m
[32m+[m[32mclass RubyOutput extends RegExpParseOutput {[m
     constructor(func) { super(func); }[m
     parse(text, regexp) {[m
         return text.replace(regexp, (match, rb, rt)=>{[m
[36m@@ -6,7 +6,7 @@[m [mclass RubyOutput extends ParseOutput {[m
         });[m
     }[m
 }[m
[31m-class RubyFullParameterOutput extends ParseOutput {[m
[32m+[m[32mclass RubyFullParameterOutput extends RegExpParseOutput {[m
     constructor(func) { super(func); }[m
     parse(text, regexp) {[m
         return text.replace(regexp, (match, rb, rt, offset, string, groups)=>{[m
[36m@@ -57,7 +57,7 @@[m [mclass RubyShortToLongNovelOutput extends RubyFullParameterOutput { // 短縮形[m
     }[m
 }[m
 [m
[31m-class RubyNovelInput extends ParseInput {[m
[32m+[m[32mclass RubyNovelInput extends RegExpParseInput {[m
     constructor(short={}, long={}) {[m
         super();[m
         this._long = (long) ? new RubyLongNovelInput(long) : null;[m
[36m@@ -88,7 +88,7 @@[m [mclass RubyHamelnInput extends RubyNovelInput {[m
     constructor() {super(null, {begin:'|', encBegin:'《', encEnd:'》'})}[m
     get RegExps() { return super.RegExps; }[m
 }[m
[31m-class RubyOptionalInput extends ParseInput {[m
[32m+[m[32mclass RubyOptionalInput extends RegExpParseInput {[m
     static #DEFAULT_OPTIONS = {[m
         begin: '|｜',[m
         rb: '^\n',[m
[36m@@ -125,7 +125,7 @@[m [mclass RubyShortNovelInput extends RubyOptionalInput { //[m
     get Options() { return super.Options; }[m
     get RegExps() { return super.RegExps; }[m
 }[m
[31m-class RubyDendenInput extends ParseInput { [m
[32m+[m[32mclass RubyDendenInput extends RegExpParseInput {[m[41m [m
     constructor(options={}) {[m
         super();[m
         super.RegExps.push(new RegExp(`\{([^\\n]{1,}?)[\|]([^\\n]{1,}?)\}`, 'g'));[m
[36m@@ -133,7 +133,7 @@[m [mclass RubyDendenInput extends ParseInput {[m
     get Options() { return super.Options; }[m
     get RegExps() { return super.RegExps; }[m
 }[m
[31m-class RubyAlphaPoliceInput extends ParseInput {[m
[32m+[m[32mclass RubyAlphaPoliceInput extends RegExpParseInput {[m
     constructor(options={}) {[m
         super();[m
         super.RegExps.push(new RegExp(`#([^\\n]{1,}?)__([^\\n]{1,}?)__#`, 'g'));[m
[36m@@ -143,51 +143,51 @@[m [mclass RubyAlphaPoliceInput extends ParseInput {[m
 }[m
 [m
 class RubyParseSetFactory {[m
[31m-    static #RootHtml = new ParseSet(new RubyRootInput(), new RubyHtmlOutput());               // ｛｝→<ruby>[m
[31m-    static #RootNovel = new ParseSet(new RubyRootInput(), new RubyLongNovelOutput());         // ｛｝→｜《》[m
[31m-    static #NovelHtml = new ParseSet(new RubyNovelInput(), new RubyHtmlOutput());             // ｜《》→<ruby>[m
[32m+[m[32m    static #RootHtml = new RegExpParseSet(new RubyRootInput(), new RubyHtmlOutput());               // ｛｝→<ruby>[m
[32m+[m[32m    static #RootNovel = new RegExpParseSet(new RubyRootInput(), new RubyLongNovelOutput());         // ｛｝→｜《》[m
[32m+[m[32m    static #NovelHtml = new RegExpParseSet(new RubyNovelInput(), new RubyHtmlOutput());             // ｜《》→<ruby>[m
 [m
     // 青空文庫→｜｛｝[m
[31m-    static #AozoraNovel = [new ParseSet(new RubyLongNovelInput({encBegin:'《', encEnd:'》'}), new RubyLongNovelOutput()),[m
[31m-                           new ParseSet(new RubyShortNovelInput({encBegin:'《', encEnd:'》'}), new RubyShortToLongNovelOutput())];[m
[31m-    static #AozoraHtml = [new ParseSet(new RubyLongNovelInput({encBegin:'《', encEnd:'》'}), new RubyHtmlOutput()),[m
[31m-                           new ParseSet(new RubyShortNovelInput({encBegin:'《', encEnd:'》'}), new RubyHtmlOutput())];[m
[32m+[m[32m    static #AozoraNovel = [new RegExpParseSet(new RubyLongNovelInput({encBegin:'《', encEnd:'》'}), new RubyLongNovelOutput()),[m
[32m+[m[32m                           new RegExpParseSet(new RubyShortNovelInput({encBegin:'《', encEnd:'》'}), new RubyShortToLongNovelOutput())];[m
[32m+[m[32m    static #AozoraHtml = [new RegExpParseSet(new RubyLongNovelInput({encBegin:'《', encEnd:'》'}), new RubyHtmlOutput()),[m
[32m+[m[32m                           new RegExpParseSet(new RubyShortNovelInput({encBegin:'《', encEnd:'》'}), new RubyHtmlOutput())];[m
     // カクヨム→｜《》[m
     static #KakuyomuNovel = RubyParseSetFactory.#AozoraNovel;[m
     static #KakuyomuHtml = RubyParseSetFactory.#AozoraHtml;[m
[31m-    static #NarouNovel = new ParseSet(new RubyNarouInput(), new RubyLongNovelOutput());       // なろう→｜《》[m
[31m-    static #NarouHtml = new ParseSet(new RubyNarouInput(), new RubyHtmlOutput());             // なろう→HTML[m
[31m-    static #HamelnNovel = new ParseSet(new RubyHamelnInput(), new RubyLongNovelOutput());     // ハーメルン→｜《》[m
[31m-    static #HamelnHtml = new ParseSet(new RubyHamelnInput(), new RubyHtmlOutput());           // ハーメルン→HTML[m
[31m-    static #AlphaPoliceNovel = new ParseSet(new RubyAlphaPoliceInput(), new RubyLongNovelOutput()); // アルファポリス→｜《》[m
[31m-    static #AlphaPoliceHtml = new ParseSet(new RubyAlphaPoliceInput(), new RubyHtmlOutput());       // アルファポリス→HTML[m
[31m-    static #DendenNovel = [new ParseSet(new RubyDendenInput(), new RubyDendenOutput()),[m
[31m-                           new ParseSet(new RubyDendenInput(), new RubyLongNovelOutput())];     // でんでん→｜《》[m
[31m-    static #DendenHtml = [new ParseSet(new RubyDendenInput(), new RubyDendenOutput()),[m
[31m-                          new ParseSet(new RubyDendenInput(), new RubyHtmlOutput())];           // でんでん→HTML[m
[32m+[m[32m    static #NarouNovel = new RegExpParseSet(new RubyNarouInput(), new RubyLongNovelOutput());       // なろう→｜《》[m
[32m+[m[32m    static #NarouHtml = new RegExpParseSet(new RubyNarouInput(), new RubyHtmlOutput());             // なろう→HTML[m
[32m+[m[32m    static #HamelnNovel = new RegExpParseSet(new RubyHamelnInput(), new RubyLongNovelOutput());     // ハーメルン→｜《》[m
[32m+[m[32m    static #HamelnHtml = new RegExpParseSet(new RubyHamelnInput(), new RubyHtmlOutput());           // ハーメルン→HTML[m
[32m+[m[32m    static #AlphaPoliceNovel = new RegExpParseSet(new RubyAlphaPoliceInput(), new RubyLongNovelOutput()); // アルファポリス→｜《》[m
[32m+[m[32m    static #AlphaPoliceHtml = new RegExpParseSet(new RubyAlphaPoliceInput(), new RubyHtmlOutput());       // アルファポリス→HTML[m
[32m+[m[32m    static #DendenNovel = [new RegExpParseSet(new RubyDendenInput(), new RubyDendenOutput()),[m
[32m+[m[32m                           new RegExpParseSet(new RubyDendenInput(), new RubyLongNovelOutput())];     // でんでん→｜《》[m
[32m+[m[32m    static #DendenHtml = [new RegExpParseSet(new RubyDendenInput(), new RubyDendenOutput()),[m
[32m+[m[32m                          new RegExpParseSet(new RubyDendenInput(), new RubyHtmlOutput())];           // でんでん→HTML[m
 [m
[31m-    static #NovelAlphaPolice = new ParseSet(new RubyNovelInput(), new RubyAlphaPoliceOutput()); // ｜《》→アルファポリス[m
[31m-    static #NovelDenden = new ParseSet(new RubyNovelInput(), new RubyDendenOutput());           // ｜《》→でんでん[m
[32m+[m[32m    static #NovelAlphaPolice = new RegExpParseSet(new RubyNovelInput(), new RubyAlphaPoliceOutput()); // ｜《》→アルファポリス[m
[32m+[m[32m    static #NovelDenden = new RegExpParseSet(new RubyNovelInput(), new RubyDendenOutput());           // ｜《》→でんでん[m
 [m
[31m-    static get RootHtml() { return RubyParseSetFactory.#RootHtml; } [m
[31m-    static get RootNovel() { return RubyParseSetFactory.#RootNovel; } [m
[31m-    static get NovelHtml() { return RubyParseSetFactory.#NovelHtml; } [m
[32m+[m[32m    static get RootHtml() { return RubyRegExpParseSetFactory.#RootHtml; }[m[41m [m
[32m+[m[32m    static get RootNovel() { return RubyRegExpParseSetFactory.#RootNovel; }[m[41m [m
[32m+[m[32m    static get NovelHtml() { return RubyRegExpParseSetFactory.#NovelHtml; }[m[41m [m
 [m
[31m-    static get AozoraNovel() { return RubyParseSetFactory.#AozoraNovel; } [m
[31m-    static get AozoraHtml() { return RubyParseSetFactory.#AozoraHtml; } [m
[31m-    static get KakuyomuNovel () { return RubyParseSetFactory.#KakuyomuNovel ; } [m
[31m-    static get KakuyomuHtml() { return RubyParseSetFactory.#KakuyomuHtml; } [m
[31m-    static get NarouNovel () { return RubyParseSetFactory.#NarouNovel ; } [m
[31m-    static get NarouHtml() { return RubyParseSetFactory.#NarouHtml; } [m
[31m-    static get HamelnNovel () { return RubyParseSetFactory.#HamelnNovel ; } [m
[31m-    static get HamelnHtml() { return RubyParseSetFactory.#HamelnHtml; } [m
[31m-    static get AlphaPoliceNovel () { return RubyParseSetFactory.#AlphaPoliceNovel ; } [m
[31m-    static get AlphaPoliceHtml() { return RubyParseSetFactory.#AlphaPoliceHtml; } [m
[31m-    static get DendenNovel () { return RubyParseSetFactory.#DendenNovel ; } [m
[31m-    static get DendenHtml() { return RubyParseSetFactory.#DendenHtml; }[m
[32m+[m[32m    static get AozoraNovel() { return RubyRegExpParseSetFactory.#AozoraNovel; }[m[41m [m
[32m+[m[32m    static get AozoraHtml() { return RubyRegExpParseSetFactory.#AozoraHtml; }[m[41m [m
[32m+[m[32m    static get KakuyomuNovel () { return RubyRegExpParseSetFactory.#KakuyomuNovel ; }[m[41m [m
[32m+[m[32m    static get KakuyomuHtml() { return RubyRegExpParseSetFactory.#KakuyomuHtml; }[m[41m [m
[32m+[m[32m    static get NarouNovel () { return RubyRegExpParseSetFactory.#NarouNovel ; }[m[41m [m
[32m+[m[32m    static get NarouHtml() { return RubyRegExpParseSetFactory.#NarouHtml; }[m[41m [m
[32m+[m[32m    static get HamelnNovel () { return RubyRegExpParseSetFactory.#HamelnNovel ; }[m[41m [m
[32m+[m[32m    static get HamelnHtml() { return RubyRegExpParseSetFactory.#HamelnHtml; }[m[41m [m
[32m+[m[32m    static get AlphaPoliceNovel () { return RubyRegExpParseSetFactory.#AlphaPoliceNovel ; }[m[41m [m
[32m+[m[32m    static get AlphaPoliceHtml() { return RubyRegExpParseSetFactory.#AlphaPoliceHtml; }[m[41m [m
[32m+[m[32m    static get DendenNovel () { return RubyRegExpParseSetFactory.#DendenNovel ; }[m[41m [m
[32m+[m[32m    static get DendenHtml() { return RubyRegExpParseSetFactory.#DendenHtml; }[m
 [m
[31m-    static get NovelAlphaPolice () { return RubyParseSetFactory.#NovelAlphaPolice; } [m
[31m-    static get NovelDenden () { return RubyParseSetFactory.#NovelDenden ; } [m
[32m+[m[32m    static get NovelAlphaPolice () { return RubyRegExpParseSetFactory.#NovelAlphaPolice; }[m[41m [m
[32m+[m[32m    static get NovelDenden () { return RubyRegExpParseSetFactory.#NovelDenden ; }[m[41m [m
 [m
 }[m
 [m
